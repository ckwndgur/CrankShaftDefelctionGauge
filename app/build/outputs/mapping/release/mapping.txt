nsl.orion.crankshaftdeflectiongauge.CrankShaftDeflection -> nsl.orion.crankshaftdeflectiongauge.CrankShaftDeflection:
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector bluetoothConnector -> a
    nsl.orion.crankshaftdeflectiongauge.sqlite.SQLiteConnector sqliteConnector -> b
    java.util.Map engineMap -> c
    nsl.orion.crankshaftdeflectiongauge.sqlite.SQLiteConnector getSqliteConnector() -> a
    java.util.Map getEngineMap() -> b
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector getBluetoothConnector() -> c
    void onCreate() -> onCreate
nsl.orion.crankshaftdeflectiongauge.activity.About -> nsl.orion.crankshaftdeflectiongauge.activity.About:
    void onCreate(android.os.Bundle) -> onCreate
nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest -> nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest:
    double cos_54degree -> a
    double cos_126degree -> b
    double cos_198degree -> c
    double cos_270degree -> d
    double cos_342degree -> e
    nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest$BluetoothDataHandler bluetoothDataHandler -> f
    float currentValue -> g
    nsl.orion.crankshaftdeflectiongauge.common.Engine currentEngine -> h
    nsl.orion.crankshaftdeflectiongauge.common.Cylinder currentCylinder -> i
    java.util.concurrent.locks.ReentrantLock lock -> j
    android.widget.TextView measuredText -> k
    android.widget.TextView engineNameTextView -> l
    android.widget.TextView cylinderOrderTextView -> m
    android.widget.TextView displayTTextView -> n
    android.widget.TextView displayPTextView -> o
    android.widget.TextView displayBPTextView -> p
    android.widget.TextView displayBETextView -> q
    android.widget.TextView displayETextView -> r
    android.widget.TextView connectedDeviceName -> s
    android.widget.TextView batteryPercent -> t
    android.widget.ImageButton nextCylinderImageButton -> u
    android.widget.ImageButton prevCylinderImageButton -> v
    android.widget.ProgressBar batteryProgressBar -> w
    java.lang.Integer receivedValue -> x
    int currentOrder -> y
    void setCurrentValue(java.lang.Float) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void updateMeasuredValue(java.lang.String) -> a
    void showAlertDialog(java.lang.String) -> b
    void updateT() -> f
    void updateP() -> g
    void updateBP() -> h
    void updateBE() -> i
    void updateE() -> j
    void updateFinished(java.lang.String) -> c
    void loadMeasuredValue() -> k
    void nextCylinder(android.view.View) -> nextCylinder
    void prevCylinder(android.view.View) -> prevCylinder
    void addCylinder(android.view.View) -> addCylinder
    void updateStandardValue() -> l
    void setReceivedValue(java.lang.Integer) -> a
    double access$000() -> a
    void access$100(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> a
    double access$200() -> b
    void access$300(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> b
    void access$400(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> c
    double access$500() -> c
    double access$600() -> d
    void access$700(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> d
    double access$800() -> e
    void access$900(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> e
    void access$1000(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> f
    android.widget.TextView access$1200(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> g
    android.widget.ProgressBar access$1300(nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest) -> h
nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest$1 -> nsl.orion.crankshaftdeflectiongauge.activity.a:
    android.view.GestureDetector gestureDetector -> a
    android.widget.ImageView val$gaugeImageView -> b
    nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest this$0 -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest$1$1 -> nsl.orion.crankshaftdeflectiongauge.activity.b:
    nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest$1 this$1 -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest$BluetoothDataHandler -> nsl.orion.crankshaftdeflectiongauge.activity.c:
    nsl.orion.crankshaftdeflectiongauge.activity.CylinderTest this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
nsl.orion.crankshaftdeflectiongauge.activity.EngineList -> nsl.orion.crankshaftdeflectiongauge.activity.EngineList:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList$BluetoothBatteryHandler bluetoothBatteryHandler -> a
    android.widget.EditText engineNameEditText -> b
    android.widget.EditText numOfCylinderEditText -> c
    android.widget.ListView engineListView -> d
    java.lang.Integer numberOfCylinder -> e
    java.util.Map engineMap -> f
    android.widget.ArrayAdapter engineAdapter -> g
    android.widget.TextView connectedDeviceName -> h
    android.widget.TextView batteryPercent -> i
    android.widget.ProgressBar batteryProgressBar -> j
    android.widget.Button addButton -> k
    android.widget.Button updateButton -> l
    nsl.orion.crankshaftdeflectiongauge.common.Engine selectedEngine -> m
    boolean addMode -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void addEngine(android.view.View) -> addEngine
    void updateEngine(android.view.View) -> updateEngine
    boolean isNumeric(java.lang.String) -> a
    boolean access$100(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> a
    android.widget.EditText access$200(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> b
    android.widget.ArrayAdapter access$400(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> c
    boolean access$102(nsl.orion.crankshaftdeflectiongauge.activity.EngineList,boolean) -> a
    nsl.orion.crankshaftdeflectiongauge.common.Engine access$502(nsl.orion.crankshaftdeflectiongauge.activity.EngineList,nsl.orion.crankshaftdeflectiongauge.common.Engine) -> a
    nsl.orion.crankshaftdeflectiongauge.common.Engine access$500(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> d
    android.widget.EditText access$600(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> e
    android.widget.Button access$700(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> f
    android.widget.Button access$800(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> g
    android.widget.TextView access$900(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> h
    android.widget.ProgressBar access$1000(nsl.orion.crankshaftdeflectiongauge.activity.EngineList) -> i
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$1 -> nsl.orion.crankshaftdeflectiongauge.activity.d:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$2 -> nsl.orion.crankshaftdeflectiongauge.activity.e:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$BluetoothBatteryHandler -> nsl.orion.crankshaftdeflectiongauge.activity.f:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener -> nsl.orion.crankshaftdeflectiongauge.activity.g:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1 -> nsl.orion.crankshaftdeflectiongauge.activity.h:
    nsl.orion.crankshaftdeflectiongauge.common.Engine val$currentEngine -> a
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener this$1 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1$1 -> nsl.orion.crankshaftdeflectiongauge.activity.i:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1$2 -> nsl.orion.crankshaftdeflectiongauge.activity.j:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1$3 -> nsl.orion.crankshaftdeflectiongauge.activity.k:
    nsl.orion.crankshaftdeflectiongauge.activity.EngineList$EngineOnclickListener$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
nsl.orion.crankshaftdeflectiongauge.activity.MainMenu -> nsl.orion.crankshaftdeflectiongauge.activity.MainMenu:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void engineList(android.view.View) -> engineList
    void setting(android.view.View) -> setting
    void about(android.view.View) -> about
    void result(android.view.View) -> result
nsl.orion.crankshaftdeflectiongauge.activity.Result -> nsl.orion.crankshaftdeflectiongauge.activity.Result:
    android.widget.ArrayAdapter engineArrayAdapter -> a
    android.widget.ArrayAdapter cylinderArrayAdapter -> b
    nsl.orion.crankshaftdeflectiongauge.common.Engine currentEngine -> c
    android.widget.ListPopupWindow listPopupWindow -> d
    android.view.View deflectionChart -> e
    org.achartengine.model.XYMultipleSeriesDataset dataset -> f
    android.widget.ListView cylinderListView -> g
    android.widget.TextView engineNameTextView -> h
    org.achartengine.model.XYSeries verDeflection -> i
    org.achartengine.model.XYSeries horDeflection -> j
    org.achartengine.model.XYSeries stddeflection -> k
    org.achartengine.renderer.XYMultipleSeriesRenderer multipleRenderer -> l
    java.text.DecimalFormat decimalFormat -> m
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void showEngineListPopup(android.view.View) -> showEngineListPopup
    void openCylinder() -> b
    void openChart() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void exportCurrentEngine(android.view.View) -> exportCurrentEngine
    nsl.orion.crankshaftdeflectiongauge.common.Engine access$002(nsl.orion.crankshaftdeflectiongauge.common.Engine) -> a
    void access$100(nsl.orion.crankshaftdeflectiongauge.activity.Result) -> a
    void access$200(nsl.orion.crankshaftdeflectiongauge.activity.Result) -> b
    nsl.orion.crankshaftdeflectiongauge.common.Engine access$000() -> a
    android.widget.TextView access$300(nsl.orion.crankshaftdeflectiongauge.activity.Result) -> c
    java.text.DecimalFormat access$400(nsl.orion.crankshaftdeflectiongauge.activity.Result) -> d
nsl.orion.crankshaftdeflectiongauge.activity.Result$1 -> nsl.orion.crankshaftdeflectiongauge.activity.l:
    nsl.orion.crankshaftdeflectiongauge.activity.Result this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
nsl.orion.crankshaftdeflectiongauge.activity.Result$2 -> nsl.orion.crankshaftdeflectiongauge.activity.m:
    nsl.orion.crankshaftdeflectiongauge.activity.Result this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
nsl.orion.crankshaftdeflectiongauge.activity.Result$3 -> nsl.orion.crankshaftdeflectiongauge.activity.n:
    java.io.File val$file -> a
    nsl.orion.crankshaftdeflectiongauge.activity.Result this$0 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
nsl.orion.crankshaftdeflectiongauge.activity.Setting -> nsl.orion.crankshaftdeflectiongauge.activity.Setting:
    android.bluetooth.BluetoothAdapter btAdapter -> a
    nsl.orion.crankshaftdeflectiongauge.activity.Setting$BluetoothSettingHandler bluetoothSettingHandler -> b
    android.widget.ImageButton buttonBluetooth -> c
    android.widget.LinearLayout listViewLayout -> d
    android.widget.LinearLayout bluetoothOffLayout -> e
    android.widget.ImageView imageConnectedBT -> f
    android.widget.TextView deviceName -> g
    android.widget.ArrayAdapter foundDevicesArrayAdapter -> h
    android.content.BroadcastReceiver broadcastReceiver -> i
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDestroy() -> onDestroy
    void onOffBluetooth(android.view.View) -> onOffBluetooth
    void turnOnBT() -> d
    void turnOffBT() -> e
    void swapButtonTurnOnBT() -> a
    void swapButtonTurnOffBT() -> b
    void showAlertDialog(java.lang.String) -> a
    android.widget.ArrayAdapter access$000(nsl.orion.crankshaftdeflectiongauge.activity.Setting) -> a
    android.bluetooth.BluetoothAdapter access$200() -> c
    android.widget.TextView access$300(nsl.orion.crankshaftdeflectiongauge.activity.Setting) -> b
    android.widget.ImageView access$400(nsl.orion.crankshaftdeflectiongauge.activity.Setting) -> c
    nsl.orion.crankshaftdeflectiongauge.activity.Setting$BluetoothSettingHandler access$500(nsl.orion.crankshaftdeflectiongauge.activity.Setting) -> d
nsl.orion.crankshaftdeflectiongauge.activity.Setting$1 -> nsl.orion.crankshaftdeflectiongauge.activity.o:
    nsl.orion.crankshaftdeflectiongauge.activity.Setting this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
nsl.orion.crankshaftdeflectiongauge.activity.Setting$BluetoothSettingHandler -> nsl.orion.crankshaftdeflectiongauge.activity.p:
    nsl.orion.crankshaftdeflectiongauge.activity.Setting this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector -> nsl.orion.crankshaftdeflectiongauge.a.a:
    android.bluetooth.BluetoothAdapter btAdapter -> a
    android.bluetooth.BluetoothDevice targetDevice -> b
    android.os.Handler bluetoothDataHandler -> c
    android.os.Handler bluetoothBatteryHandler -> d
    android.os.Handler bluetoothSettingHandler -> e
    java.lang.Integer standardValue -> f
    int connectionState -> g
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$ConnectThread connectThread -> h
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$ConnectedThread connectedThread -> i
    android.bluetooth.BluetoothDevice getTargetDevice() -> a
    void setTargetDevice(android.bluetooth.BluetoothDevice) -> a
    void setBluetoothDataHandler(android.os.Handler) -> a
    void setBluetoothBatteryHandler(android.os.Handler) -> b
    void setBluetoothSettingHandler(android.os.Handler) -> c
    java.lang.Integer getStandardValue() -> b
    void setStandardValue(java.lang.Integer) -> a
    int getConnectionState() -> c
    void setConnectionState(int) -> a
    void turnOnBT() -> d
    void turnOffBT() -> e
    void connectionStateChange() -> l
    void connect() -> f
    void stop() -> g
    void connected(android.bluetooth.BluetoothSocket) -> a
    void connectionFailed() -> m
    void connectionLost() -> n
    android.bluetooth.BluetoothAdapter access$000() -> h
    android.os.Handler access$100() -> i
    void access$200(nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector) -> a
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$ConnectThread access$302(nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector,nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$ConnectThread) -> a
    java.lang.Integer access$402(java.lang.Integer) -> b
    void access$500(nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector) -> b
    android.os.Handler access$600() -> j
    android.os.Handler access$700() -> k
nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$1 -> nsl.orion.crankshaftdeflectiongauge.a.b:
    void run() -> run
nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$2 -> nsl.orion.crankshaftdeflectiongauge.a.c:
    void run() -> run
nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$ConnectThread -> nsl.orion.crankshaftdeflectiongauge.a.d:
    android.bluetooth.BluetoothSocket bluetoothSocket -> b
    android.bluetooth.BluetoothDevice bluetoothDevice -> c
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector this$0 -> a
    void run() -> run
    void cancel() -> a
nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector$ConnectedThread -> nsl.orion.crankshaftdeflectiongauge.a.e:
    android.bluetooth.BluetoothSocket bluetoothSocket -> b
    java.io.InputStream inputStream -> c
    java.io.OutputStream outputStream -> d
    boolean shouldConnect -> e
    nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector this$0 -> a
    void run() -> run
    void cancel() -> a
nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothUtils -> nsl.orion.crankshaftdeflectiongauge.a.f:
    android.bluetooth.BluetoothSocket createRfcommSocket(android.bluetooth.BluetoothDevice) -> a
nsl.orion.crankshaftdeflectiongauge.common.BTArrayAdapter -> nsl.orion.crankshaftdeflectiongauge.b.a:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
nsl.orion.crankshaftdeflectiongauge.common.Cylinder -> nsl.orion.crankshaftdeflectiongauge.b.b:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    boolean[] finishedPositions -> a
    java.lang.Long engineId -> b
    java.lang.Integer order -> c
    java.lang.Float t -> d
    java.lang.Float p -> e
    java.lang.Float bp -> f
    java.lang.Float be -> g
    java.lang.Float e -> h
    java.lang.String dateOfCreation -> i
    java.lang.String lastUpdate -> j
    java.lang.Integer isFinished -> k
    java.lang.Long getEngineId() -> a
    void setEngineId(long) -> a
    java.lang.Integer getOrder() -> b
    void setOrder(int) -> a
    java.lang.Float getT() -> c
    void setT(float) -> a
    java.lang.Float getP() -> d
    void setP(float) -> b
    java.lang.Float getBp() -> e
    void setBp(float) -> c
    java.lang.Float getBe() -> f
    void setBe(float) -> d
    java.lang.Float getE() -> g
    void setE(float) -> e
    java.lang.String getDateOfCreation() -> h
    void setDateOfCreation(java.lang.String) -> a
    java.lang.String getLastUpdate() -> i
    void setLastUpdate(java.lang.String) -> b
    java.lang.Integer getIsFinished() -> j
    void setIsFinished(java.lang.Integer) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
nsl.orion.crankshaftdeflectiongauge.common.Cylinder$1 -> nsl.orion.crankshaftdeflectiongauge.b.c:
    nsl.orion.crankshaftdeflectiongauge.common.Cylinder createFromParcel(android.os.Parcel) -> a
    nsl.orion.crankshaftdeflectiongauge.common.Cylinder[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
nsl.orion.crankshaftdeflectiongauge.common.CylinderArrayAdapter -> nsl.orion.crankshaftdeflectiongauge.b.d:
    java.text.DecimalFormat decimalFormat -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
nsl.orion.crankshaftdeflectiongauge.common.Engine -> nsl.orion.crankshaftdeflectiongauge.b.e:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.util.ArrayList cylinderArrayList -> a
    java.lang.Long id -> b
    java.lang.String name -> c
    java.lang.String type -> d
    java.lang.Integer numberOfCylinder -> e
    java.lang.String dateOfCreation -> f
    java.lang.String lastUpdate -> g
    java.lang.Integer isFinished -> h
    java.lang.Long getId() -> a
    void setId(java.lang.Long) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    java.lang.String getType() -> c
    void setType(java.lang.String) -> b
    java.lang.Integer getNumberOfCylinder() -> d
    void setNumberOfCylinder(java.lang.Integer) -> a
    java.lang.String getDateOfCreation() -> e
    void setDateOfCreation(java.lang.String) -> c
    java.lang.String getLastUpdate() -> f
    void setLastUpdate(java.lang.String) -> d
    java.lang.Integer getIsFinished() -> g
    void setIsFinished(java.lang.Integer) -> b
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
nsl.orion.crankshaftdeflectiongauge.common.Engine$1 -> nsl.orion.crankshaftdeflectiongauge.b.f:
    nsl.orion.crankshaftdeflectiongauge.common.Engine createFromParcel(android.os.Parcel) -> a
    nsl.orion.crankshaftdeflectiongauge.common.Engine[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
nsl.orion.crankshaftdeflectiongauge.common.EngineArrayAdapter -> nsl.orion.crankshaftdeflectiongauge.b.g:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
nsl.orion.crankshaftdeflectiongauge.sqlite.CDGSQLiteOpenHelper -> nsl.orion.crankshaftdeflectiongauge.c.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void onConfigure(android.database.sqlite.SQLiteDatabase) -> onConfigure
    void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> onDowngrade
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
nsl.orion.crankshaftdeflectiongauge.sqlite.SQLiteConnector -> nsl.orion.crankshaftdeflectiongauge.c.b:
    android.database.sqlite.SQLiteDatabase database -> a
    nsl.orion.crankshaftdeflectiongauge.sqlite.CDGSQLiteOpenHelper openHelper -> b
    java.lang.Long loadAll(java.util.Map) -> a
    java.lang.Long insertEngine(nsl.orion.crankshaftdeflectiongauge.common.Engine) -> a
    java.lang.Long insertEmptyCylinders(java.util.List) -> a
    java.lang.Long addCylinder(nsl.orion.crankshaftdeflectiongauge.common.Cylinder) -> a
    java.lang.Long updateCylinder(int,nsl.orion.crankshaftdeflectiongauge.common.Cylinder,java.lang.String) -> a
    java.lang.Long updateIsFinishedCylinder(nsl.orion.crankshaftdeflectiongauge.common.Cylinder) -> b
    java.lang.Long updateEngine(nsl.orion.crankshaftdeflectiongauge.common.Engine,java.lang.String) -> updateEngine
    java.lang.Long deleteCylinder(java.lang.Long,java.lang.Integer) -> a
    java.lang.Long deleteCylinders(java.lang.Long) -> a
    java.lang.Long deleteEngine(java.lang.Long) -> b
org.achartengine.ChartFactory -> a.a.a:
    org.achartengine.GraphicalView getLineChartView(android.content.Context,org.achartengine.model.XYMultipleSeriesDataset,org.achartengine.renderer.XYMultipleSeriesRenderer) -> a
    void checkParameters(org.achartengine.model.XYMultipleSeriesDataset,org.achartengine.renderer.XYMultipleSeriesRenderer) -> a
org.achartengine.GraphicalView -> a.a.b:
    org.achartengine.chart.AbstractChart mChart -> a
    org.achartengine.renderer.DefaultRenderer mRenderer -> b
    android.graphics.Rect mRect -> c
    android.os.Handler mHandler -> d
    android.graphics.RectF mZoomR -> e
    android.graphics.Bitmap zoomInImage -> f
    android.graphics.Bitmap zoomOutImage -> g
    android.graphics.Bitmap fitZoomImage -> h
    int zoomSize -> i
    int ZOOM_BUTTONS_COLOR -> j
    org.achartengine.tools.Zoom mZoomIn -> k
    org.achartengine.tools.Zoom mZoomOut -> l
    org.achartengine.tools.FitZoom mFitZoom -> m
    android.graphics.Paint mPaint -> n
    org.achartengine.ITouchHandler mTouchHandler -> o
    float oldX -> p
    float oldY -> q
    boolean mDrawn -> r
    org.achartengine.model.SeriesSelection getCurrentSeriesAndPoint() -> getCurrentSeriesAndPoint
    void onDraw(android.graphics.Canvas) -> onDraw
    void setZoomRate(float) -> setZoomRate
    void zoomIn() -> a
    void zoomOut() -> b
    void zoomReset() -> c
    android.graphics.RectF getZoomRectangle() -> getZoomRectangle
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void repaint() -> d
org.achartengine.GraphicalView$1 -> a.a.c:
    org.achartengine.GraphicalView this$0 -> a
    void run() -> run
org.achartengine.ITouchHandler -> a.a.d:
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.TouchHandler -> a.a.e:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    float oldX -> b
    float oldY -> c
    float oldX2 -> d
    float oldY2 -> e
    android.graphics.RectF zoomR -> f
    org.achartengine.tools.Pan mPan -> g
    org.achartengine.tools.Zoom mPinchZoom -> h
    org.achartengine.GraphicalView graphicalView -> i
    boolean handleTouch(android.view.MotionEvent) -> a
    void applyZoom(float,int) -> a
org.achartengine.TouchHandlerOld -> a.a.f:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    float oldX -> b
    float oldY -> c
    android.graphics.RectF zoomR -> d
    org.achartengine.tools.Pan mPan -> e
    org.achartengine.GraphicalView graphicalView -> f
    boolean handleTouch(android.view.MotionEvent) -> a
org.achartengine.chart.AbstractChart -> a.a.a.a:
    void draw(android.graphics.Canvas,int,int,int,int,android.graphics.Paint) -> a
    void drawBackground(org.achartengine.renderer.DefaultRenderer,android.graphics.Canvas,int,int,int,int,android.graphics.Paint,boolean,int) -> a
    int drawLegend(android.graphics.Canvas,org.achartengine.renderer.DefaultRenderer,java.lang.String[],int,int,int,int,int,int,android.graphics.Paint,boolean) -> a
    void drawString(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint) -> a
    boolean getExceed(float,org.achartengine.renderer.DefaultRenderer,int,int) -> a
    boolean isVertical(org.achartengine.renderer.DefaultRenderer) -> a
    java.lang.String getLabel(java.text.NumberFormat,double) -> a
    float[] calculateDrawPoints(float,float,float,float,int,int) -> a
    void drawPath(android.graphics.Canvas,java.util.List,android.graphics.Paint,boolean) -> a
    void drawPath(android.graphics.Canvas,float[],android.graphics.Paint,boolean) -> a
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    int getLegendSize(org.achartengine.renderer.DefaultRenderer,int,float) -> a
    boolean isNullValue(double) -> a
    org.achartengine.model.SeriesSelection getSeriesAndPointForScreenCoordinate(org.achartengine.model.Point) -> a
org.achartengine.chart.ClickableArea -> a.a.a.b:
    android.graphics.RectF rect -> a
    double x -> b
    double y -> c
    android.graphics.RectF getRect() -> a
    double getX() -> b
    double getY() -> c
org.achartengine.chart.LineChart -> a.a.a.c:
    org.achartengine.chart.ScatterChart pointsChart -> c
    void drawSeries(android.graphics.Canvas,android.graphics.Paint,java.util.List,org.achartengine.renderer.SimpleSeriesRenderer,float,int,int) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints(java.util.List,java.util.List,float,int,int) -> a
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    boolean isRenderPoints(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.chart.ScatterChart getPointsChart() -> a
org.achartengine.chart.LineChart$1 -> a.a.a.d:
    int[] $SwitchMap$org$achartengine$renderer$XYSeriesRenderer$FillOutsideLine$Type -> a
org.achartengine.chart.PointStyle -> a.a.a.e:
    org.achartengine.chart.PointStyle X -> a
    org.achartengine.chart.PointStyle CIRCLE -> b
    org.achartengine.chart.PointStyle TRIANGLE -> c
    org.achartengine.chart.PointStyle SQUARE -> d
    org.achartengine.chart.PointStyle DIAMOND -> e
    org.achartengine.chart.PointStyle POINT -> f
    java.lang.String mName -> g
    org.achartengine.chart.PointStyle[] $VALUES -> h
    org.achartengine.chart.PointStyle[] values() -> values
    org.achartengine.chart.PointStyle valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
org.achartengine.chart.RoundChart -> a.a.a.f:
    org.achartengine.renderer.DefaultRenderer mRenderer -> a
    int mCenterX -> b
    int mCenterY -> c
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    org.achartengine.renderer.DefaultRenderer getRenderer() -> a
    int getCenterX() -> b
    int getCenterY() -> c
    void setCenterX(int) -> b
    void setCenterY(int) -> c
org.achartengine.chart.ScatterChart -> a.a.a.g:
    float size -> c
    void drawSeries(android.graphics.Canvas,android.graphics.Paint,java.util.List,org.achartengine.renderer.SimpleSeriesRenderer,float,int,int) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints(java.util.List,java.util.List,float,int,int) -> a
    int getLegendShapeWidth(int) -> a
    void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,int,android.graphics.Paint) -> a
    void drawX(android.graphics.Canvas,android.graphics.Paint,float,float) -> a
    void drawCircle(android.graphics.Canvas,android.graphics.Paint,float,float) -> b
    void drawTriangle(android.graphics.Canvas,android.graphics.Paint,float[],float,float) -> a
    void drawSquare(android.graphics.Canvas,android.graphics.Paint,float,float) -> c
    void drawDiamond(android.graphics.Canvas,android.graphics.Paint,float[],float,float) -> b
org.achartengine.chart.ScatterChart$1 -> a.a.a.h:
    int[] $SwitchMap$org$achartengine$chart$PointStyle -> a
org.achartengine.chart.XYChart -> a.a.a.i:
    org.achartengine.model.XYMultipleSeriesDataset mDataset -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer mRenderer -> b
    float mScale -> c
    float mTranslate -> d
    org.achartengine.model.Point mCenter -> e
    android.graphics.Rect mScreenR -> f
    java.util.Map mCalcRange -> g
    java.util.Map clickableAreas -> h
    void draw(android.graphics.Canvas,int,int,int,int,android.graphics.Paint) -> a
    java.util.List getXLabels(double,double,int) -> a
    java.util.Map getYLabels(double[],double[],int) -> a
    java.util.List getValidLabels(java.util.List) -> a
    void drawSeries(org.achartengine.model.XYSeries,android.graphics.Canvas,android.graphics.Paint,java.util.List,org.achartengine.renderer.SimpleSeriesRenderer,float,int,org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation,int) -> a
    void setStroke(android.graphics.Paint$Cap,android.graphics.Paint$Join,float,android.graphics.Paint$Style,android.graphics.PathEffect,android.graphics.Paint) -> a
    void drawChartValuesText(android.graphics.Canvas,org.achartengine.model.XYSeries,org.achartengine.renderer.SimpleSeriesRenderer,android.graphics.Paint,java.util.List,int,int) -> a
    void drawText(android.graphics.Canvas,java.lang.String,float,float,android.graphics.Paint,float) -> a
    void transform(android.graphics.Canvas,float,boolean) -> a
    void drawXLabels(java.util.List,java.lang.Double[],android.graphics.Canvas,android.graphics.Paint,int,int,int,double,double,double) -> a
    void drawYLabels(java.util.Map,android.graphics.Canvas,android.graphics.Paint,int,int,int,int,double[],double[]) -> a
    void drawXTextLabels(java.lang.Double[],android.graphics.Canvas,android.graphics.Paint,boolean,int,int,int,double,double,double) -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer getRenderer() -> b
    org.achartengine.model.XYMultipleSeriesDataset getDataset() -> c
    double[] getCalcRange(int) -> b
    int getLabelLinePos(android.graphics.Paint$Align) -> a
    double[] toRealPoint(float,float,int) -> a
    org.achartengine.model.SeriesSelection getSeriesAndPointForScreenCoordinate(org.achartengine.model.Point) -> a
    void drawSeries(android.graphics.Canvas,android.graphics.Paint,java.util.List,org.achartengine.renderer.SimpleSeriesRenderer,float,int,int) -> a
    org.achartengine.chart.ClickableArea[] clickableAreasForPoints(java.util.List,java.util.List,float,int,int) -> a
    boolean isRenderNullValues() -> d
    boolean isRenderPoints(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.chart.ScatterChart getPointsChart() -> a
org.achartengine.model.Point -> a.a.b.a:
    float mX -> a
    float mY -> b
    float getX() -> a
    float getY() -> b
org.achartengine.model.SeriesSelection -> a.a.b.b:
    int mSeriesIndex -> a
    int mPointIndex -> b
    double mXValue -> c
    double mValue -> d
org.achartengine.model.XYMultipleSeriesDataset -> a.a.b.c:
    java.util.List mSeries -> a
    void addSeries(org.achartengine.model.XYSeries) -> a
    void clear() -> a
    org.achartengine.model.XYSeries getSeriesAt(int) -> a
    int getSeriesCount() -> b
    org.achartengine.model.XYSeries[] getSeries() -> c
org.achartengine.model.XYSeries -> a.a.b.d:
    java.lang.String mTitle -> a
    org.achartengine.util.IndexXYMap mXY -> b
    double mMinX -> c
    double mMaxX -> d
    double mMinY -> e
    double mMaxY -> f
    int mScaleNumber -> g
    java.util.List mAnnotations -> h
    org.achartengine.util.IndexXYMap mStringXY -> i
    int getScaleNumber() -> a
    void initRange() -> k
    void updateRange(double,double) -> b
    java.lang.String getTitle() -> b
    void add(double,double) -> a
    double getPadding() -> c
    void clear() -> d
    double getX(int) -> a
    double getY(int) -> b
    double getAnnotationX(int) -> c
    double getAnnotationY(int) -> d
    int getAnnotationCount() -> e
    java.lang.String getAnnotationAt(int) -> e
    java.util.SortedMap getRange(double,double,boolean) -> a
    int getIndexForKey(double) -> a
    int getItemCount() -> f
    double getMinX() -> g
    double getMinY() -> h
    double getMaxX() -> i
    double getMaxY() -> j
org.achartengine.renderer.BasicStroke -> a.a.c.a:
    org.achartengine.renderer.BasicStroke SOLID -> a
    org.achartengine.renderer.BasicStroke DASHED -> b
    org.achartengine.renderer.BasicStroke DOTTED -> c
    android.graphics.Paint$Cap mCap -> d
    android.graphics.Paint$Join mJoin -> e
    float mMiter -> f
    float[] mIntervals -> g
    float mPhase -> h
    android.graphics.Paint$Cap getCap() -> a
    android.graphics.Paint$Join getJoin() -> b
    float getMiter() -> c
    float[] getIntervals() -> d
    float getPhase() -> e
org.achartengine.renderer.DefaultRenderer -> a.a.c.b:
    java.lang.String mChartTitle -> a
    float mChartTitleTextSize -> b
    android.graphics.Typeface REGULAR_TEXT_FONT -> c
    java.lang.String mTextTypefaceName -> d
    int mTextTypefaceStyle -> e
    android.graphics.Typeface mTextTypeface -> f
    int mBackgroundColor -> g
    boolean mApplyBackgroundColor -> h
    boolean mShowAxes -> i
    int mAxesColor -> j
    boolean mShowLabels -> k
    int mLabelsColor -> l
    float mLabelsTextSize -> m
    boolean mShowLegend -> n
    float mLegendTextSize -> o
    boolean mFitLegend -> p
    boolean mShowGridX -> q
    boolean mShowGridY -> r
    boolean mShowCustomTextGrid -> s
    java.util.List mRenderers -> t
    boolean mAntialiasing -> u
    int mLegendHeight -> v
    int[] mMargins -> w
    float mScale -> x
    boolean mPanEnabled -> y
    boolean mZoomEnabled -> z
    boolean mZoomButtonsVisible -> A
    float mZoomRate -> B
    boolean mExternalZoomEnabled -> C
    float mOriginalScale -> D
    boolean mClickEnabled -> E
    int selectableBuffer -> F
    boolean mInScroll -> G
    float mStartAngle -> H
    java.lang.String getChartTitle() -> a
    float getChartTitleTextSize() -> b
    void setChartTitleTextSize(float) -> a
    void addSeriesRenderer(org.achartengine.renderer.SimpleSeriesRenderer) -> a
    org.achartengine.renderer.SimpleSeriesRenderer getSeriesRendererAt(int) -> a
    int getSeriesRendererCount() -> c
    int getBackgroundColor() -> d
    boolean isApplyBackgroundColor() -> e
    int getAxesColor() -> f
    int getLabelsColor() -> g
    void setLabelsColor(int) -> b
    float getLabelsTextSize() -> h
    void setLabelsTextSize(float) -> b
    boolean isShowAxes() -> i
    boolean isShowLabels() -> j
    boolean isShowGridX() -> k
    boolean isShowGridY() -> l
    boolean isShowCustomTextGrid() -> m
    boolean isShowLegend() -> n
    boolean isFitLegend() -> o
    void setFitLegend(boolean) -> a
    java.lang.String getTextTypefaceName() -> p
    int getTextTypefaceStyle() -> q
    android.graphics.Typeface getTextTypeface() -> r
    float getLegendTextSize() -> s
    void setLegendTextSize(float) -> c
    boolean isAntialiasing() -> t
    float getScale() -> u
    float getOriginalScale() -> v
    void setScale(float) -> d
    boolean isZoomEnabled() -> w
    boolean isZoomButtonsVisible() -> x
    boolean isExternalZoomEnabled() -> y
    float getZoomRate() -> z
    boolean isPanEnabled() -> A
    boolean isClickEnabled() -> B
    int getSelectableBuffer() -> C
    int getLegendHeight() -> D
    int[] getMargins() -> E
    void setMargins(int[]) -> a
    boolean isInScroll() -> F
org.achartengine.renderer.SimpleSeriesRenderer -> a.a.c.c:
    int mColor -> a
    boolean mDisplayChartValues -> b
    int mDisplayChartValuesDistance -> c
    float mChartValuesTextSize -> d
    android.graphics.Paint$Align mChartValuesTextAlign -> e
    float mChartValuesSpacing -> f
    org.achartengine.renderer.BasicStroke mStroke -> g
    boolean mGradientEnabled -> h
    boolean mShowLegendItem -> i
    java.text.NumberFormat mChartValuesFormat -> j
    boolean mDisplayBoundingPoints -> k
    int getColor() -> a
    void setColor(int) -> a
    boolean isDisplayChartValues() -> b
    void setDisplayChartValues(boolean) -> a
    int getDisplayChartValuesDistance() -> c
    float getChartValuesTextSize() -> d
    void setChartValuesTextSize(float) -> a
    android.graphics.Paint$Align getChartValuesTextAlign() -> e
    float getChartValuesSpacing() -> f
    org.achartengine.renderer.BasicStroke getStroke() -> g
    boolean isShowLegendItem() -> h
    boolean isDisplayBoundingPoints() -> i
    java.text.NumberFormat getChartValuesFormat() -> j
    void setChartValuesFormat(java.text.NumberFormat) -> a
org.achartengine.renderer.XYMultipleSeriesRenderer -> a.a.c.d:
    java.lang.String mXTitle -> a
    java.lang.String[] mYTitle -> b
    float mAxisTitleTextSize -> c
    double[] mMinX -> d
    double[] mMaxX -> e
    double[] mMinY -> f
    double[] mMaxY -> g
    int mXLabels -> h
    int mYLabels -> i
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation mOrientation -> j
    java.util.Map mXTextLabels -> k
    java.util.Map mYTextLabels -> l
    boolean mPanXEnabled -> m
    boolean mPanYEnabled -> n
    boolean mZoomXEnabled -> o
    boolean mZoomYEnabled -> p
    double mBarSpacing -> q
    int mMarginsColor -> r
    double[] mPanLimits -> s
    double[] mZoomLimits -> t
    float mXLabelsAngle -> u
    float mYLabelsAngle -> v
    java.util.Map initialRange -> w
    float mPointSize -> x
    int mGridColor -> y
    int scalesCount -> z
    android.graphics.Paint$Align xLabelsAlign -> A
    android.graphics.Paint$Align[] yLabelsAlign -> B
    float mXLabelsPadding -> C
    float mYLabelsPadding -> D
    float mYLabelsVerticalPadding -> E
    android.graphics.Paint$Align[] yAxisAlign -> F
    int mXLabelsColor -> G
    int[] mYLabelsColor -> H
    boolean mXRoundedLabels -> I
    java.text.NumberFormat mLabelFormat -> J
    float mBarWidth -> K
    double mZoomInLimitX -> L
    double mZoomInLimitY -> M
    void initAxesRange(int) -> c
    void initAxesRangeForScale(int) -> d
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation getOrientation() -> G
    java.lang.String getXTitle() -> H
    void setXTitle(java.lang.String) -> a
    java.lang.String getYTitle() -> I
    java.lang.String getYTitle(int) -> e
    void setYTitle(java.lang.String) -> b
    void setYTitle(java.lang.String,int) -> a
    float getAxisTitleTextSize() -> J
    void setAxisTitleTextSize(float) -> e
    void setYAxisMin(double) -> a
    void setYAxisMax(double) -> b
    double getXAxisMin(int) -> f
    void setXAxisMin(double,int) -> a
    boolean isMinXSet(int) -> g
    double getXAxisMax(int) -> h
    void setXAxisMax(double,int) -> b
    boolean isMaxXSet(int) -> i
    double getYAxisMin(int) -> j
    void setYAxisMin(double,int) -> c
    boolean isMinYSet(int) -> k
    double getYAxisMax(int) -> l
    void setYAxisMax(double,int) -> d
    boolean isMaxYSet(int) -> m
    int getXLabels() -> K
    void setXLabels(int) -> n
    void addXTextLabel(double,java.lang.String) -> a
    java.lang.String getXTextLabel(java.lang.Double) -> a
    java.lang.Double[] getXTextLabelLocations() -> L
    java.lang.String getYTextLabel(java.lang.Double,int) -> a
    java.lang.Double[] getYTextLabelLocations(int) -> o
    int getYLabels() -> M
    boolean isPanEnabled() -> A
    boolean isPanXEnabled() -> N
    boolean isPanYEnabled() -> O
    boolean isZoomEnabled() -> w
    boolean isZoomXEnabled() -> P
    boolean isZoomYEnabled() -> Q
    int getMarginsColor() -> R
    void setMarginsColor(int) -> p
    int getGridColor() -> S
    double[] getPanLimits() -> T
    double[] getZoomLimits() -> U
    float getXLabelsAngle() -> V
    float getYLabelsAngle() -> W
    float getPointSize() -> X
    void setRange(double[],int) -> a
    boolean isInitialRangeSet() -> Y
    boolean isInitialRangeSet(int) -> q
    double[] getInitialRange(int) -> r
    int getXLabelsColor() -> Z
    int getYLabelsColor(int) -> s
    void setXLabelsColor(int) -> t
    void setYLabelsColor(int,int) -> a
    android.graphics.Paint$Align getXLabelsAlign() -> aa
    android.graphics.Paint$Align getYLabelsAlign(int) -> u
    void setYLabelsAlign(android.graphics.Paint$Align) -> a
    android.graphics.Paint$Align getYAxisAlign(int) -> v
    void setYLabelsAlign(android.graphics.Paint$Align,int) -> a
    float getXLabelsPadding() -> ab
    float getYLabelsPadding() -> ac
    float getYLabelsVerticalPadding() -> ad
    void setYLabelsPadding(float) -> f
    java.text.NumberFormat getLabelFormat() -> ae
    double getZoomInLimitX() -> af
    double getZoomInLimitY() -> ag
    int getScalesCount() -> ah
org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation -> a.a.c.e:
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation HORIZONTAL -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation VERTICAL -> b
    int mAngle -> c
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation[] $VALUES -> d
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation[] values() -> values
    org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation valueOf(java.lang.String) -> valueOf
    int getAngle() -> a
org.achartengine.renderer.XYSeriesRenderer -> a.a.c.f:
    boolean mFillPoints -> a
    java.util.List mFillBelowLine -> b
    org.achartengine.chart.PointStyle mPointStyle -> c
    float mPointStrokeWidth -> d
    float mLineWidth -> e
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine[] getFillOutsideLine() -> k
    boolean isFillPoints() -> l
    void setFillPoints(boolean) -> b
    org.achartengine.chart.PointStyle getPointStyle() -> m
    void setPointStyle(org.achartengine.chart.PointStyle) -> a
    float getPointStrokeWidth() -> n
    float getLineWidth() -> o
    void setLineWidth(float) -> b
org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine -> a.a.c.g:
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type mType -> a
    int mColor -> b
    int[] mFillRange -> c
    int getColor() -> a
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type getType() -> b
    int[] getFillRange() -> c
org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type -> a.a.c.h:
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type NONE -> a
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type BOUNDS_ALL -> b
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type BOUNDS_BELOW -> c
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type BOUNDS_ABOVE -> d
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type BELOW -> e
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type ABOVE -> f
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type[] $VALUES -> g
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type[] values() -> values
    org.achartengine.renderer.XYSeriesRenderer$FillOutsideLine$Type valueOf(java.lang.String) -> valueOf
org.achartengine.tools.AbstractTool -> a.a.d.a:
    org.achartengine.chart.AbstractChart mChart -> a
    org.achartengine.renderer.XYMultipleSeriesRenderer mRenderer -> b
    double[] getRange(int) -> a
    void checkRange(double[],int) -> a
    void setXRange(double,double,int) -> a
    void setYRange(double,double,int) -> b
org.achartengine.tools.FitZoom -> a.a.d.b:
    void apply() -> a
org.achartengine.tools.Pan -> a.a.d.c:
    java.util.List mPanListeners -> c
    boolean limitsReachedX -> d
    boolean limitsReachedY -> e
    void apply(float,float,float,float) -> a
    double getAxisRatio(double[]) -> a
    void notifyPanListeners() -> a
org.achartengine.tools.PanListener -> a.a.d.d:
    void panApplied() -> a
org.achartengine.tools.Zoom -> a.a.d.e:
    boolean mZoomIn -> c
    float mZoomRate -> d
    java.util.List mZoomListeners -> e
    boolean limitsReachedX -> f
    boolean limitsReachedY -> g
    void setZoomRate(float) -> a
    void apply(int) -> b
    void notifyZoomListeners(org.achartengine.tools.ZoomEvent) -> a
    void notifyZoomResetListeners() -> a
org.achartengine.tools.ZoomEvent -> a.a.d.f:
    boolean mZoomIn -> a
    float mZoomRate -> b
org.achartengine.tools.ZoomListener -> a.a.d.g:
    void zoomApplied(org.achartengine.tools.ZoomEvent) -> a
    void zoomReset() -> a
org.achartengine.util.IndexXYMap -> a.a.e.a:
    java.util.List indexList -> a
    double maxXDifference -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void updateMaxXDifference() -> a
    void clear() -> clear
    java.lang.Object getXByIndex(int) -> a
    java.lang.Object getYByIndex(int) -> b
    int getIndexForKey(java.lang.Object) -> a
org.achartengine.util.MathHelper -> a.a.e.b:
    java.text.NumberFormat FORMAT -> a
    java.util.List getLabels(double,double,int) -> a
    double[] computeLabels(double,double,int) -> b
    double roundUp(double) -> a
