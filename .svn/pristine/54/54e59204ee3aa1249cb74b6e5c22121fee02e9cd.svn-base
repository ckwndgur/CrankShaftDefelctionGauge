package nsl.orion.crankshaftdeflectiongauge.activity;

import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import java.lang.ref.WeakReference;
import java.util.ArrayList;

import nsl.orion.crankshaftdeflectiongauge.R;
import nsl.orion.crankshaftdeflectiongauge.bluetooth.BluetoothConnector;
import nsl.orion.crankshaftdeflectiongauge.common.BTArrayAdapter;

public class Setting extends Activity implements AdapterView.OnItemClickListener {
    private static BluetoothAdapter btAdapter;
    private BluetoothSettingHandler bluetoothSettingHandler;
    private ImageButton buttonBluetooth;
    private LinearLayout listViewLayout;
    private LinearLayout bluetoothOffLayout;
    private ImageView imageConnectedBT;
    private TextView deviceName;
    private ArrayAdapter<BluetoothDevice> foundDevicesArrayAdapter;
    private final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                foundDevicesArrayAdapter.remove(device);
                foundDevicesArrayAdapter.add(device);
                foundDevicesArrayAdapter.notifyDataSetChanged();
            } else if (BluetoothDevice.ACTION_PAIRING_REQUEST.equals(action)) {
                BluetoothConnector.getTargetDevice().setPairingConfirmation(true);
                byte[] pin = "1111".getBytes();
                BluetoothConnector.getTargetDevice().setPin(pin);
            }
        }
    };

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        BluetoothDevice selectedDevice = foundDevicesArrayAdapter.getItem(position);
        deviceName.setText(selectedDevice.getName());
        if (selectedDevice.getBondState() != BluetoothDevice.BOND_BONDED) {
            selectedDevice.createBond();
        }
        BluetoothConnector.setTargetDevice(selectedDevice);
        imageConnectedBT.setVisibility(View.VISIBLE);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.setting_screen);
        btAdapter = BluetoothAdapter.getDefaultAdapter();

        buttonBluetooth = (ImageButton) findViewById(R.id.buttonBluetooth);
        deviceName = (TextView) findViewById(R.id.device_name_text_view);
        imageConnectedBT = (ImageView) findViewById(R.id.connected_circle);
        listViewLayout = (LinearLayout) findViewById(R.id.list_view_layout);
        bluetoothOffLayout = (LinearLayout) findViewById(R.id.turn_off_bluetooth_layout);

        registerReceiver(broadcastReceiver, new IntentFilter(BluetoothDevice.ACTION_FOUND));
        registerReceiver(broadcastReceiver, new IntentFilter(BluetoothDevice.ACTION_PAIRING_REQUEST));

        foundDevicesArrayAdapter = new BTArrayAdapter(this, new ArrayList());
        ListView list = (ListView) findViewById(R.id.crankshaftlist);
        list.setAdapter(foundDevicesArrayAdapter);
        foundDevicesArrayAdapter.notifyDataSetChanged();
        list.setOnItemClickListener(this);

        if (btAdapter == null) {
            showAlertDialog(getString(R.string.no_bt_support));
            return;
        }
        if (bluetoothSettingHandler == null)
            bluetoothSettingHandler = new BluetoothSettingHandler(this);
        else bluetoothSettingHandler.setTarget(this);

        BluetoothConnector.setBluetoothSettingHandler(bluetoothSettingHandler);

        if (BluetoothConnector.getTargetDevice() != null) {
            deviceName.setText(BluetoothConnector.getTargetDevice().getName());
            imageConnectedBT.setVisibility(View.VISIBLE);
            btAdapter.startDiscovery();
        } else {
            BluetoothConnector.turnOnBT();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_setting, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (btAdapter != null) {
            btAdapter.cancelDiscovery();
        }
        unregisterReceiver(broadcastReceiver);
    }

    public void onOffBluetooth(View v){
        if(btAdapter!=null){
            if(btAdapter.isEnabled()){
                turnOffBT();
            } else turnOnBT();
        }
    }

    private void turnOnBT() {
        BluetoothConnector.turnOnBT();
        foundDevicesArrayAdapter.clear();
        btAdapter.startDiscovery();
    }


    private void turnOffBT() {
        BluetoothConnector.turnOffBT();
        foundDevicesArrayAdapter.clear();
        deviceName.setText(getResources().getString(R.string.device_name_not_set));
    }

    protected void swapButtonTurnOnBT() {
        buttonBluetooth.setImageResource(R.mipmap.ic_bluetooth_disabled_white_48dp);
        listViewLayout.setVisibility(View.VISIBLE);
        bluetoothOffLayout.setVisibility(View.GONE);
    }

    protected void swapButtonTurnOffBT() {
        buttonBluetooth.setImageResource(R.mipmap.ic_bluetooth_white_48dp);
        listViewLayout.setVisibility(View.VISIBLE);
        bluetoothOffLayout.setVisibility(View.GONE);
        imageConnectedBT.setVisibility(View.GONE);
    }

    private void showAlertDialog(String message) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
        alertDialogBuilder.setTitle(getString(R.string.app_name));
        alertDialogBuilder.setMessage(message);
        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }

    private class BluetoothSettingHandler extends android.os.Handler {
        private WeakReference<Setting> settingWeakReference;

        public BluetoothSettingHandler(Setting activity) {
            settingWeakReference = new WeakReference<>(activity);
        }

        public void setTarget(Setting target) {
            settingWeakReference.clear();
            settingWeakReference = new WeakReference<>(target);
        }

        @Override
        public void handleMessage(Message message) {
            Setting activity = settingWeakReference.get();
            if (activity != null) {
                switch (message.what) {
                    case BluetoothConnector.BT_STATE_CHANGE:
                        switch (btAdapter.getState()) {
                            case BluetoothAdapter.STATE_ON:
                                swapButtonTurnOnBT();
                                break;
                            case BluetoothAdapter.STATE_OFF:
                                swapButtonTurnOffBT();
                                break;
                            default:
                                try {
                                    Thread.sleep(100);
                                    Log.d("BluetoothStateChange", "Unknown");
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                    Log.d("BluetoothStateChange", "sleep error");
                                }
                                obtainMessage(BluetoothConnector.BT_STATE_CHANGE, 8, -1, null).sendToTarget();
                                Log.d("BluetoothStateChange", "message loop");
                                break;
                        }
                        break;
                    case BluetoothConnector.BATTERY_INFO:
                        break;
                }
            }
        }
    }
}
