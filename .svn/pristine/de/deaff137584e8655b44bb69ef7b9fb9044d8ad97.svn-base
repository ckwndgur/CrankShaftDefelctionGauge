package nsl.orion.crankshaftdeflectiongauge.activity;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.InputType;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.TextView;

import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Map;

import nsl.orion.crankshaftdeflectiongauge.CrankShaftDeflection;
import nsl.orion.crankshaftdeflectiongauge.R;
import nsl.orion.crankshaftdeflectiongauge.common.Cylinder;
import nsl.orion.crankshaftdeflectiongauge.common.Engine;
import nsl.orion.crankshaftdeflectiongauge.common.EngineArrayAdapter;


public class EngineList extends Activity {

    private EditText engineNameEditText, numOfCylinderEditText;
    private ListView engineListView;
    private Integer numberOfCylinder;
    private Map<Long,Engine> engineMap;
    private ArrayAdapter<Engine> engineAdapter;




    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.engine_list_screen);

        engineListView = (ListView) findViewById(R.id.engineListView);
        engineNameEditText = (EditText) findViewById(R.id.etEngineName);
        numOfCylinderEditText = (EditText) findViewById(R.id.etNumOfCylinder);

        engineNameEditText.setInputType(InputType.TYPE_CLASS_TEXT);
        numOfCylinderEditText.setInputType(InputType.TYPE_CLASS_NUMBER);

        engineMap = CrankShaftDeflection.getEngineMap();
        engineAdapter = new EngineArrayAdapter(this,new ArrayList(engineMap.values()));
        engineListView.setAdapter(engineAdapter);
        engineListView.setSelection(engineAdapter.getCount()-1);

        engineListView.setOnItemClickListener(new EngineOnclickListener());
        numOfCylinderEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if ((event != null && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || (actionId == EditorInfo.IME_ACTION_DONE)) {
                    addEngine(null);
                }
                return false;
            }
        });

        engineNameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if ((event != null && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || (actionId == EditorInfo.IME_ACTION_DONE)) {
                    engineNameEditText.requestFocus();
                }
                return false;
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        engineAdapter.clear();
        engineAdapter.addAll(engineMap.values());
        engineAdapter.notifyDataSetChanged();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_engine_list, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }

    public void addEngine(View v){
        if (engineNameEditText.getText() != null &&
                isNumeric(numOfCylinderEditText.getText().toString())) {
            Time time = new Time(Calendar.getInstance().getTimeInMillis());
            SimpleDateFormat date = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            String dateString = date.format(time);
            String name = engineNameEditText.getText().toString();

            Engine tempEngine = new Engine();
            tempEngine.setName(name);
            tempEngine.setNumberOfCylinder(numberOfCylinder);
            tempEngine.setDateOfCreation(dateString);
            tempEngine.setLastUpdate(dateString);
            tempEngine.setType("default");
            tempEngine.setIsFinished(Engine.NOT_FINISHED);

            tempEngine.setId(CrankShaftDeflection.getSqliteConnector().insertEngine(tempEngine));
            ArrayList<Cylinder> tempCylinderList = new ArrayList();
            for (int i = 0;i < numberOfCylinder; i++){
                Cylinder tempCylinder = new Cylinder();
                tempCylinder.setEngineId(tempEngine.getId());
                tempCylinder.setOrder(i + 1);
                tempCylinder.setT(100);
                tempCylinder.setE(100);
                tempCylinder.setBe(100);
                tempCylinder.setBp(100);
                tempCylinder.setP(100);
                tempCylinder.setDateOfCreation(dateString);
                tempCylinder.setLastUpdate(dateString);
                tempCylinder.setIsFinished(Cylinder.NOT_FINISHED);

                tempCylinderList.add(tempCylinder);
            }
            CrankShaftDeflection.getSqliteConnector().insertEmptyCylinders(tempCylinderList);
            tempEngine.cylinderArrayList = tempCylinderList;
            engineMap.put(tempEngine.getId(), tempEngine);
            engineAdapter.add(tempEngine);
            engineAdapter.notifyDataSetChanged();
            engineNameEditText.setText(null);
            numOfCylinderEditText.setText(null);
            engineListView.setSelection(engineAdapter.getCount()-1);
            InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
            imm.toggleSoftInput(0,0);
        }
    }

    private boolean isNumeric(String str)
    {
        try
        {
            int number = Integer.parseInt(str);
            numberOfCylinder = number;
        }
        catch(NumberFormatException nfe)
        {
            return false;
        }
        return true;
    }

    private class EngineOnclickListener implements AdapterView.OnItemClickListener {

        @Override
        public void onItemClick(final AdapterView<?> parent, final View view, final int position, long id) {

            PopupMenu popup = new PopupMenu(EngineList.this, view);
            popup.getMenuInflater().inflate(R.menu.engine_popup_menu, popup.getMenu());
            final Engine selectedEngine = engineAdapter.getItem(position);
            popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                @Override
                public boolean onMenuItemClick(MenuItem item) {
                    switch (item.getItemId()) {
                        case R.id.modifyEngine:
                            Bundle bundle = new Bundle();
                            bundle.putLong("engineId", selectedEngine.getId());
                            Intent intent = new Intent(getApplicationContext(), CylinderTest.class);
                            intent.putExtras(bundle);
                            startActivity(intent);
                            break;
                        case R.id.deleteEngine:
                            AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(EngineList.this,R.style.DialogTheme);
                            dialogBuilder.setMessage("Are your sure you want to delete this engine?");
                            dialogBuilder.setCancelable(true);
                            dialogBuilder.setPositiveButton("Cancel",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
                                            dialog.cancel();
                                        }
                                    });
                            dialogBuilder.setNegativeButton("Yes",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
                                            engineAdapter.remove(selectedEngine);
                                            CrankShaftDeflection.getEngineMap().remove(selectedEngine.getId());
                                            CrankShaftDeflection.getSqliteConnector().deleteEngine(selectedEngine.getId());
                                            CrankShaftDeflection.getSqliteConnector().deleteCylinders(selectedEngine.getId());
                                            engineAdapter.notifyDataSetChanged();
                                            dialog.cancel();
                                        }
                                    });
                            AlertDialog alertDialog = dialogBuilder.create();
                            alertDialog.show();
                            break;
                        case R.id.engineDetail:
                            AlertDialog.Builder dialogMessageBuilder = new AlertDialog.Builder(EngineList.this,R.style.DialogTheme);
                            String engineDetail = "Engine name: " +selectedEngine.getName() + "\n"+
                                    "Number of Cylinder: " + selectedEngine.getNumberOfCylinder() + "\n"+
                                    "Engine type: " + selectedEngine.getType() + "\n"+
                                    "Date of Creation: " + selectedEngine.getDateOfCreation() +"\n"+
                                    "Last update: " + selectedEngine.getLastUpdate();
                            dialogMessageBuilder.setMessage(engineDetail);
                            dialogMessageBuilder.setCancelable(true);
                            dialogMessageBuilder.setPositiveButton("Cancel",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {
                                            dialog.cancel();
                                        }
                                    });
                            dialogMessageBuilder.create().show();
                            break;
                    }
                    return true;
                }
            });

            popup.show();
        }
    }


}
