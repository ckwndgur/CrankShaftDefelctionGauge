package nsl.orion.crankshaftdeflectiongauge.activity;

import android.app.Activity;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListPopupWindow;
import android.widget.ListView;

import org.achartengine.ChartFactory;
import org.achartengine.chart.PointStyle;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.model.XYSeries;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import java.util.ArrayList;

import nsl.orion.crankshaftdeflectiongauge.CrankShaftDeflection;
import nsl.orion.crankshaftdeflectiongauge.R;
import nsl.orion.crankshaftdeflectiongauge.common.CylinderListAdapter;
import nsl.orion.crankshaftdeflectiongauge.common.Engine;
import nsl.orion.crankshaftdeflectiongauge.common.EngineListAdapter;


public class Result extends Activity {

    public static ArrayAdapter engineArrayAdapter;
    public static ArrayAdapter cylinderArrayAdapter;
    private static Engine currentEngine;
    private static ListPopupWindow listPopupWindow;
    private static View deflectionChart;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.result_screen);

        engineArrayAdapter = new EngineListAdapter(this,new ArrayList());
        engineArrayAdapter.addAll(CrankShaftDeflection.getEngineMap().values());

        cylinderArrayAdapter = new CylinderListAdapter(this, new ArrayList());
        if(currentEngine ==null && engineArrayAdapter.getCount() !=0) {
            currentEngine =(Engine) engineArrayAdapter.getItem(0);
            openCylinder();
            openChart();
        }

        listPopupWindow = new ListPopupWindow(this);
        listPopupWindow.setAdapter(engineArrayAdapter);
        listPopupWindow.setAnchorView(findViewById(R.id.list_btn));
        listPopupWindow.setModal(true);
        listPopupWindow.setWidth(500);
        listPopupWindow.setHeight(800);
        listPopupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                currentEngine = (Engine) engineArrayAdapter.getItem(position);
                openCylinder();
                openChart();
            }
        });





    }

    public void showEngineListPopup(View view){
            listPopupWindow.show();
    }

    private void openCylinder(){
        cylinderArrayAdapter.clear();
        cylinderArrayAdapter.addAll(currentEngine.cylinderMap.values());
        cylinderArrayAdapter.notifyDataSetChanged();
    }


    private void openChart(){
        // Creating an XYseries for Vertical Deflection and Horizontal Deflection
        XYSeries verDeflection = new XYSeries("Vertical Deflection");
        XYSeries horDeflection = new XYSeries("Horizontal Deflection");
        XYSeries stDdeflection = new XYSeries("Standard Deflection");

        //Adding data to verdeflection and hordeflection
        for (int i=0; i<TB.length;i++ ){
            verDeflection.add(x[i], TB[i]);
            horDeflection.add(x[i], EP[i]);
            stDdeflection.add(x[i], stdline[i]);
        }

        //Creating a dataset to hold each series
        XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();
        dataset.addSeries(verDeflection);
        dataset.addSeries(horDeflection);
        dataset.addSeries(stDdeflection);

        //Creating XYSeriesRenderer to customize Vertical Deflection
        XYSeriesRenderer verrenderer = new XYSeriesRenderer();
        verrenderer.setColor(Color.RED);
        verrenderer.setPointStyle(PointStyle.TRIANGLE);
        verrenderer.setFillPoints(true);
        verrenderer.setLineWidth(3);
        verrenderer.setDisplayChartValues(true);

        //Creating XYSeriesRenderer to customize Horizontal Deflection
        XYSeriesRenderer horrenderer = new XYSeriesRenderer();
        horrenderer.setColor(Color.GREEN);
        horrenderer.setPointStyle(PointStyle.SQUARE);
        horrenderer.setFillPoints(true);
        horrenderer.setLineWidth(3);
        horrenderer.setDisplayChartValues(true);

        //Creating XYSeries to customize stddeflection Line
        XYSeriesRenderer stdrenderer = new XYSeriesRenderer();
        stdrenderer.setColor(Color.BLACK);
        stdrenderer.setFillPoints(true);
        stdrenderer.setLineWidth(1);

        //Creating a XYMultipleseriesRenderer to customize the whole chart
        XYMultipleSeriesRenderer multipleRenderer = new XYMultipleSeriesRenderer();
        multipleRenderer.setXTitle("\n" + " \n" + " \n" + " \n" + "Cylinder Number");
        multipleRenderer.setYTitle("Deflection Data");
        multipleRenderer.setLabelsTextSize(30);
        multipleRenderer.setLabelsColor(Color.WHITE);
        multipleRenderer.setAxisTitleTextSize(20);
        multipleRenderer.setChartTitleTextSize(20);
        multipleRenderer.setMarginsColor(getResources().getColor(R.color.cyan));
        multipleRenderer.setYAxisMax(0.5);
        multipleRenderer.setYAxisMin(-0.5);
        multipleRenderer.setLegendTextSize(25);
        multipleRenderer.setMargins(new int[]{20, 100, 50, 100});
        multipleRenderer.setXLabelsColor(Color.WHITE);
        multipleRenderer.setYLabelsColor(0, Color.WHITE);
        multipleRenderer.setAxisTitleTextSize(35);
        multipleRenderer.setYLabelsAlign(Paint.Align.RIGHT);
        multipleRenderer.setFitLegend(true);

        //Adding verrenderer and horrenderer to multipleRenderer
        multipleRenderer.addSeriesRenderer(verrenderer);
        multipleRenderer.addSeriesRenderer(horrenderer);
        multipleRenderer.addSeriesRenderer(stdrenderer);

        LinearLayout chartContainer = (LinearLayout) findViewById(R.id.chart_container);
        deflectionChart = ChartFactory.getLineChartView(getBaseContext(), dataset, multipleRenderer);
        chartContainer.addView(deflectionChart);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_result, menu);
        return true;
    }
}
